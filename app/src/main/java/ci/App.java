/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ci;

import java.io.IOException;

import java.net.InetSocketAddress;

import com.sun.net.httpserver.HttpServer;

public class App {

    public static void main(String[] args) {

		String address = null;
		String port = null;
		String targetDir = null;	//directory of build log history
		String webhookPath = null;	//url path where github webhooks are sent
		String projectDir = null;	//root directory of project. absolute path.

		for(int i = 0; i < args.length; i++) {
			switch(args[i]) {
				case "--address":		address = args[++i];
										break;
				case "--port":			port = args[++i];
										break;
				case "--target_dir":	targetDir = args[++i];
										break;
				case "--webhooks":		webhookPath = args[++i];
										break;
				case "--project_dir":	projectDir = args[++i];
										break;
			}
		}

		if(address == null || port == null || targetDir == null || webhookPath == null || projectDir == null) {
			System.out.println("Usage: requires url and port of server to be specified along with destination path of webhooks. Also requires a directory for build log history to be specified.");
			System.out.println("--address       IPv4 address of server in following format: x.x.x.x or other valid InetAddress format.");
			System.out.println("--port          port number that server listens to.");
			System.out.println("--target_dir    directory in which to store history of build logs.");
			System.out.println("--webhooks		url path where github webhooks should be sent.");
			System.out.println("--project_dir	absolute path of project directory.");
			System.exit(0);
		}

		try {                                                                   
			HttpServer server = HttpServer.create(new InetSocketAddress(address, Integer.parseInt(port)), 0);
			server.createContext(webhookPath, new CIServer(targetDir));           
			server.createContext("/", new FileHandler(projectDir, targetDir));
            server.start();                                                     
        }                                                                       
        catch(IOException e) {                                                  
			System.out.println("Failed to instantiate server.");                
        } 
    }
}
